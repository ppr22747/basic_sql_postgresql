-- Here are some of the exercises for which you can write SQL queries to self evaluate using all the concepts we have learnt to write SQL Queries.
-- * All the exercises are based on retail tables.
-- * We have already setup the tables and also populated the data.
-- * We will use all the 6 tables in retail database as part of these exercises.

-- Here are the commands to validate the tables
SELECT count(*) FROM departments;
SELECT count(*) FROM categories;
SELECT count(*) FROM products;
SELECT count(*) FROM orders;
SELECT count(*) FROM order_items;
SELECT count(*) FROM customers;

-- ### Exercise 1 - Customer order count

-- Get order count per customer for the month of 2014 January.

-- * Tables - `orders` and `customers`
-- * Data should be sorted in descending order by count and ascending order by customer id.
-- * Output should contain `customer_id`, `customer_fname`, `customer_lname` and `customer_order_count`.

select * from customers;
select * from orders;

select c.customer_id, c.customer_fname, c.customer_lname, count(*) as customer_order_count
from orders as o
join customers as c
on o.order_customer_id = c.customer_id
where o.order_date between '2014-01-01' and '2014-01-31'
group by c.customer_id
order by customer_order_count desc, c.customer_id asc;


-- ### Exercise 2 - Dormant Customers

-- Get the customer details who have not placed any order for the month of 2014 January.
-- * Tables - `orders` and `customers`
-- * Output Columns - **All columns from customers as is**
-- * Data should be sorted in ascending order by `customer_id`
-- * Output should contain all the fields from `customers`
-- * Make sure to run below provided validation queries and validate the output.

select distinct(order_status)
from orders;

select c.*
from customers as c
left join orders as o
	on c.customer_id = o.order_customer_id
		and o.order_date >= '2014-01-01'
		and o.order_date <'2014-01-31'
where o.order_id is null
order by c.customer_id
;

-- SELECT c.*
-- FROM customers c
-- LEFT JOIN orders o 
--   ON c.customer_id = o.order_customer_id 
--      AND o.order_date >= '2014-01-01' 
--      AND o.order_date < '2014-02-01'
-- WHERE o.order_id IS NULL
-- ORDER BY c.customer_id;

-- * Checking to confirm above querying

SELECT count(DISTINCT order_customer_id)
FROM orders
WHERE to_char(order_date, 'yyyy-MM') = '2014-01';

SELECT count(*)
FROM customers;

-- Get the difference
-- Get the count using solution query, both the difference and this count should match

-- * Hint: You can use `NOT IN` or `NOT EXISTS` or `OUTER JOIN` to solve this problem.

select
(
SELECT count(*)
FROM customers
) - (
SELECT count(DISTINCT order_customer_id)
FROM orders
WHERE to_char(order_date, 'yyyy-MM') = '2014-01'
);


-- ### Exercise 3 - Revenue Per Customer

-- Get the revenue generated by each customer for the month of 2014 January
-- * Tables - `orders`, `order_items` and `customers`
-- * Data should be sorted in descending order by revenue and then ascending order by `customer_id`
-- * Output should contain `customer_id`, `customer_fname`, `customer_lname`, `customer_revenue`.
-- * If there are no orders placed by customer, then the corresponding revenue for a given customer should be 0.
-- * Consider only `COMPLETE` and `CLOSED` orders

select customer_id,
	customer_fname,
	customer_lname,
	coalesce(round(sum(oi.order_item_subtotal)::numeric, 2), 0) AS customer_revenue
from customers as c
	left join orders as o
		on c.customer_id = o.order_customer_id
			and o.order_date between '2014-01-01' and '2014-01-31'
			and o.order_status in ('CLOSED', 'COMPLETE')
	left join order_items as oi
		on o.order_id = oi.order_item_order_id
group by c.customer_id, c.customer_fname, c.customer_lname
order by customer_revenue desc, 1
;

select*
from order_items
;

select*
from orders
;

select count(*)
from (SELECT c.customer_id,
    c.customer_fname,
    c.customer_lname,
    coalesce(round(sum(oi.order_item_subtotal)::numeric, 2), 0) AS customer_revenue
FROM customers AS c
    LEFT OUTER JOIN orders AS o
        ON o.order_customer_id = c.customer_id
            AND to_char(order_date, 'yyyy-MM') = '2014-01'
            AND o.order_status IN ('COMPLETE', 'CLOSED')
    LEFT OUTER JOIN order_items AS oi
        ON o.order_id = oi.order_item_order_id
GROUP BY 1, 2, 3
ORDER BY 4 desc, 1) as q

-- ### Exercise 4 - Revenue Per Category

-- Get the revenue generated for each category for the month of 2014 January
-- * Tables - `orders`, `order_items`, `products` and `categories`
-- * Data should be sorted in ascending order by `category_id`.
-- * Output should contain all the fields from `categories` along with the revenue as `category_revenue`.
-- * Consider only `COMPLETE` and `CLOSED` orders

select *
from categories;

select *
from orders;

select *
from order_items;

select *
from products

select ca.*,
	coalesce(round(sum(oi.order_item_subtotal)::numeric,2), 0) as category_revenue
from categories as ca
	join products as p
		on ca.category_id = p.product_category_id
	join order_items as oi
		on p.product_id = oi.order_item_product_id
	join orders as o
		on o.order_id = oi.order_item_order_id
where o.order_date between '2014-01-01' and '2014-01-31'
and o.order_status in ('CLOSED', 'COMPLETE')
group by category_id
order by category_id;

-- ### Exercise 5 - Product Count Per Department

-- Get the count of products for each department.
-- * Tables - `departments`, `categories`, `products`
-- * Data should be sorted in ascending order by `department_id`
-- * Output should contain all the fields from `departments` and the product count as `product_count`

select * from departments;
select * from categories;
select * from products;

select d.*,
	count(distinct(p.*)) as product_count
from departments as d
	join categories as ca
		on d.department_id = ca.category_department_id
	join products as p
		on p.product_category_id = ca.category_id
group by 1,2
order by department_id;